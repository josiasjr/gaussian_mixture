/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package gmm.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroGmm extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3706587850803054986L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroGmm\",\"namespace\":\"gmm.avro\",\"fields\":[{\"name\":\"weights\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"means\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}},{\"name\":\"precisions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroGmm> ENCODER =
      new BinaryMessageEncoder<AvroGmm>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroGmm> DECODER =
      new BinaryMessageDecoder<AvroGmm>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroGmm> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroGmm> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroGmm>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroGmm to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroGmm from a ByteBuffer. */
  public static AvroGmm fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.List<java.lang.Double> weights;
  @Deprecated public java.util.List<java.util.List<java.lang.Double>> means;
  @Deprecated public java.util.List<java.util.List<java.util.List<java.lang.Double>>> precisions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroGmm() {}

  /**
   * All-args constructor.
   * @param weights The new value for weights
   * @param means The new value for means
   * @param precisions The new value for precisions
   */
  public AvroGmm(java.util.List<java.lang.Double> weights, java.util.List<java.util.List<java.lang.Double>> means, java.util.List<java.util.List<java.util.List<java.lang.Double>>> precisions) {
    this.weights = weights;
    this.means = means;
    this.precisions = precisions;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return weights;
    case 1: return means;
    case 2: return precisions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: weights = (java.util.List<java.lang.Double>)value$; break;
    case 1: means = (java.util.List<java.util.List<java.lang.Double>>)value$; break;
    case 2: precisions = (java.util.List<java.util.List<java.util.List<java.lang.Double>>>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'weights' field.
   * @return The value of the 'weights' field.
   */
  public java.util.List<java.lang.Double> getWeights() {
    return weights;
  }

  /**
   * Sets the value of the 'weights' field.
   * @param value the value to set.
   */
  public void setWeights(java.util.List<java.lang.Double> value) {
    this.weights = value;
  }

  /**
   * Gets the value of the 'means' field.
   * @return The value of the 'means' field.
   */
  public java.util.List<java.util.List<java.lang.Double>> getMeans() {
    return means;
  }

  /**
   * Sets the value of the 'means' field.
   * @param value the value to set.
   */
  public void setMeans(java.util.List<java.util.List<java.lang.Double>> value) {
    this.means = value;
  }

  /**
   * Gets the value of the 'precisions' field.
   * @return The value of the 'precisions' field.
   */
  public java.util.List<java.util.List<java.util.List<java.lang.Double>>> getPrecisions() {
    return precisions;
  }

  /**
   * Sets the value of the 'precisions' field.
   * @param value the value to set.
   */
  public void setPrecisions(java.util.List<java.util.List<java.util.List<java.lang.Double>>> value) {
    this.precisions = value;
  }

  /**
   * Creates a new AvroGmm RecordBuilder.
   * @return A new AvroGmm RecordBuilder
   */
  public static gmm.avro.AvroGmm.Builder newBuilder() {
    return new gmm.avro.AvroGmm.Builder();
  }

  /**
   * Creates a new AvroGmm RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroGmm RecordBuilder
   */
  public static gmm.avro.AvroGmm.Builder newBuilder(gmm.avro.AvroGmm.Builder other) {
    return new gmm.avro.AvroGmm.Builder(other);
  }

  /**
   * Creates a new AvroGmm RecordBuilder by copying an existing AvroGmm instance.
   * @param other The existing instance to copy.
   * @return A new AvroGmm RecordBuilder
   */
  public static gmm.avro.AvroGmm.Builder newBuilder(gmm.avro.AvroGmm other) {
    return new gmm.avro.AvroGmm.Builder(other);
  }

  /**
   * RecordBuilder for AvroGmm instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroGmm>
    implements org.apache.avro.data.RecordBuilder<AvroGmm> {

    private java.util.List<java.lang.Double> weights;
    private java.util.List<java.util.List<java.lang.Double>> means;
    private java.util.List<java.util.List<java.util.List<java.lang.Double>>> precisions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(gmm.avro.AvroGmm.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.weights)) {
        this.weights = data().deepCopy(fields()[0].schema(), other.weights);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.means)) {
        this.means = data().deepCopy(fields()[1].schema(), other.means);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.precisions)) {
        this.precisions = data().deepCopy(fields()[2].schema(), other.precisions);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroGmm instance
     * @param other The existing instance to copy.
     */
    private Builder(gmm.avro.AvroGmm other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.weights)) {
        this.weights = data().deepCopy(fields()[0].schema(), other.weights);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.means)) {
        this.means = data().deepCopy(fields()[1].schema(), other.means);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.precisions)) {
        this.precisions = data().deepCopy(fields()[2].schema(), other.precisions);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'weights' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getWeights() {
      return weights;
    }

    /**
      * Sets the value of the 'weights' field.
      * @param value The value of 'weights'.
      * @return This builder.
      */
    public gmm.avro.AvroGmm.Builder setWeights(java.util.List<java.lang.Double> value) {
      validate(fields()[0], value);
      this.weights = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'weights' field has been set.
      * @return True if the 'weights' field has been set, false otherwise.
      */
    public boolean hasWeights() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'weights' field.
      * @return This builder.
      */
    public gmm.avro.AvroGmm.Builder clearWeights() {
      weights = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'means' field.
      * @return The value.
      */
    public java.util.List<java.util.List<java.lang.Double>> getMeans() {
      return means;
    }

    /**
      * Sets the value of the 'means' field.
      * @param value The value of 'means'.
      * @return This builder.
      */
    public gmm.avro.AvroGmm.Builder setMeans(java.util.List<java.util.List<java.lang.Double>> value) {
      validate(fields()[1], value);
      this.means = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'means' field has been set.
      * @return True if the 'means' field has been set, false otherwise.
      */
    public boolean hasMeans() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'means' field.
      * @return This builder.
      */
    public gmm.avro.AvroGmm.Builder clearMeans() {
      means = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'precisions' field.
      * @return The value.
      */
    public java.util.List<java.util.List<java.util.List<java.lang.Double>>> getPrecisions() {
      return precisions;
    }

    /**
      * Sets the value of the 'precisions' field.
      * @param value The value of 'precisions'.
      * @return This builder.
      */
    public gmm.avro.AvroGmm.Builder setPrecisions(java.util.List<java.util.List<java.util.List<java.lang.Double>>> value) {
      validate(fields()[2], value);
      this.precisions = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'precisions' field has been set.
      * @return True if the 'precisions' field has been set, false otherwise.
      */
    public boolean hasPrecisions() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'precisions' field.
      * @return This builder.
      */
    public gmm.avro.AvroGmm.Builder clearPrecisions() {
      precisions = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroGmm build() {
      try {
        AvroGmm record = new AvroGmm();
        record.weights = fieldSetFlags()[0] ? this.weights : (java.util.List<java.lang.Double>) defaultValue(fields()[0]);
        record.means = fieldSetFlags()[1] ? this.means : (java.util.List<java.util.List<java.lang.Double>>) defaultValue(fields()[1]);
        record.precisions = fieldSetFlags()[2] ? this.precisions : (java.util.List<java.util.List<java.util.List<java.lang.Double>>>) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroGmm>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroGmm>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroGmm>
    READER$ = (org.apache.avro.io.DatumReader<AvroGmm>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
